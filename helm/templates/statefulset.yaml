---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ include "fbcore.fullname" . }}
  labels:
    {{- include "fbcore.labels" . | nindent 4 }}
    firebolt/nodes-count: {{ .Values.nodesCount | quote }}
spec:
  serviceName: {{ include "fbcore.fullname" . }}-svc
  replicas: {{ .Values.nodesCount }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      {{- include "fbcore.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "fbcore.labels" . | nindent 8 }}
        {{- with $.Values.extra_pod_labels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ $.Values.deployment.terminationGracePeriodSeconds }}
      {{- if .Values.nonRoot }}
      securityContext:
        fsGroup: 1111
      {{- end }}
      {{- if and .Values.memlockSetup .Values.nonRoot }}
      shareProcessNamespace: true
      {{- end }}
      containers:
        - name: core
          image: {{ $.Values.image.repository }}:{{  default $.Chart.AppVersion $.Values.image.tag }}
          imagePullPolicy: Always
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: NODES_COUNT
              value: {{ .Values.nodesCount | quote }}
          command: ["/bin/bash", "-c"]
          tty: true
          stdin: true
          args:
            - |
              REQUIRED_MEMLOCK_BYTES=8589934592 # 8GB

              echo -n "[Setup] Firebolt Core version "
              /firebolt-core/firebolt-core --version

              {{- if .Values.nonRoot }}
              if [[ $(id -u) -eq 0 ]]; then
                echo "[Setup] Core container is running as root, however deployment used nonRoot=false" 1>&2
                exit 4
              fi

              {{- if .Values.memlockSetup }}
              echo "[Setup] Core entrypoint PID: $BASHPID"
              rm -f /firebolt-core/volume/entrypoint-*.pid
              echo "$BASHPID" > /firebolt-core/volume/entrypoint-$POD_UID.pid
              trap "rm /firebolt-core/volume/entrypoint-$POD_UID.pid" EXIT

              ## wait until memlock limits are changed by the helper container
              CURRENT_MEMLOCK_VALUE=$(cat /proc/self/limits | grep -F 'Max locked memory' | awk '{print $4}')
              echo "[Setup] current soft memlock limit: $CURRENT_MEMLOCK_VALUE (will wait for limits to be upgraded if below 8GB)" 1>&2
              while true; do
                CURRENT_MEMLOCK_VALUE=$(cat /proc/self/limits | grep -F 'Max locked memory' | awk '{print $4}')

                if [ "$CURRENT_MEMLOCK_VALUE" = "unlimited" ]; then
                  break
                fi
                if [ "$CURRENT_MEMLOCK_VALUE" -ge "$REQUIRED_MEMLOCK_BYTES" ]; then
                  break
                fi

                sleep 0.2
              done
              {{- end }}
              {{- else }}
              if [[ $(id -u) -ne 0 ]]; then
                echo "[Setup] Core container is not running as root, however deployment used nonRoot=true" 1>&2
                exit 4
              fi

              {{- if .Values.memlockSetup }}
              {{ fail "memlockSetup=true is unnecessary with nonRoot=false" }}
              {{- end }}

              {{- end }}
              echo "[Setup] current memlock limit (running as root with IPC_LOCK, will ignore this limit):" 1>&2
              cat /proc/self/limits | grep -F 'Max locked memory' 1>&2

              export POD_INDEX="$(echo $POD_NAME | awk -F'-' '{print $NF}')"
              exec /firebolt-core/firebolt-core --node $POD_INDEX
          ports:
            - name: http-query
              containerPort: 3473
              protocol: TCP
            - name: health
              containerPort: 8122
              protocol: TCP
            - name: execp
              containerPort: 5678
              protocol: TCP
            - name: datacp
              containerPort: 16000
              protocol: TCP
            - name: storage-manager
              containerPort: 1717
              protocol: TCP
            - name: storage-agent
              containerPort: 3434
              protocol: TCP
            - name: metadata
              containerPort: 6500
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            periodSeconds: 5
            timeoutSeconds: 3
            httpGet:
              path: /health/live
              port: 8122
          {{- if .Values.readiness }}
          readinessProbe:
            periodSeconds: 5
            timeoutSeconds: 3
            httpGet:
              path: /health/ready
              port: 8122
          {{- end }}
          resources:
              {{- toYaml $.Values.resources | nindent 12 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: firebolt-core-data{{ if .Values.nonRoot }}-nr{{ end }}
              mountPath: /firebolt-core/volume
            - name: nodes-config
              mountPath: /firebolt-core/config.json
              subPath: config.json
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: false
            {{- if .Values.nonRoot }}
            runAsNonRoot: true
            runAsUser: 1111
            runAsGroup: 1111
            {{- end }}
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                # IPC_LOCK is always necessary in order to use io_uring, for both the root and non-root versions
                - IPC_LOCK
        {{- if and .Values.memlockSetup .Values.nonRoot }}
        - name: memlock-setup
          # use an image which has 'prlimit'
          image: debian:stable-slim
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              memory: 64Mi
          securityContext:
            runAsUser: 0
            capabilities:
              drop:
                - ALL
              add:
                - SYS_RESOURCE
          env:
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
          command: ["/bin/bash", "-c"]
          args:
          - |
            set +e
            PID_FILE="/firebolt-core/volume/entrypoint-$POD_UID.pid"
            CORE_PID=""
            echo "[Setup] Waiting for entrypoint PID" 1>&2
            while [ -z "$CORE_PID" ]; do
              if [ -f $PID_FILE ]; then
                CORE_PID="$(< $PID_FILE)"
                if [ -n "$CORE_PID" ]; then
                  if [ ! -d /proc/$CORE_PID ]; then
                    echo "[Setup] Core PID is $CORE_PID, but it was not found under /proc; perhaps it was killed or there is a problem with shareProcessNamespace" 1>&2
                    exit 2
                  fi

                  # process exists
                  break
                fi
              fi
              sleep 0.2
            done
            set -e
            echo "[Setup] Core PID is $CORE_PID" 1>&2

            REQUIRED_MEMLOCK_BYTES=8589934592 # 8GB
            # Expected: 'unlimited' or a number in bytes.
            CURRENT_MEMLOCK_VALUE=$(cat /proc/self/limits | grep -F 'Max locked memory' | awk '{print $4}')
            echo "[Setup] current soft memlock limit: $CURRENT_MEMLOCK_VALUE" 1>&2

            if [ "$CURRENT_MEMLOCK_VALUE" = "unlimited" ]; then
              echo "[Setup] current memlock limit is 'unlimited'. No change needed." 1>&2
            else
              if [ "$CURRENT_MEMLOCK_VALUE" -lt "$REQUIRED_MEMLOCK_BYTES" ]; then
                echo "[Setup] current limit ($CURRENT_MEMLOCK_VALUE bytes) is below required 8GB, setting a higher limit" 1>&2

                if prlimit --pid $CORE_PID --memlock=$REQUIRED_MEMLOCK_BYTES:$REQUIRED_MEMLOCK_BYTES; then
                  echo "[Setup] successfully set memlock limit for PID $CORE_PID" 1>&2
                else
                  echo "[Setup] failed to set memlock prlimit. Check capabilities or node configuration." 1>&2
                  exit 1
                fi
              else
                echo "[Setup] current memlock limit ($CURRENT_MEMLOCK_VALUE bytes) is already sufficient (>= 8GB). No change needed." 1>&2
              fi
            fi

            rm "$PID_FILE"

            echo "[Setup] idle waiting"
            exec tail -f /dev/null
          volumeMounts:
            - name: firebolt-core-data{{ if .Values.nonRoot }}-nr{{ end }}
              mountPath: /firebolt-core/volume
        {{- end }}
      volumes:
        - name: nodes-config
          configMap:
            name: {{ include "fbcore.fullname" . }}-nodes-config
            items:
              - key: config.json
                path: config.json
  volumeClaimTemplates:
    - metadata:
        name: firebolt-core-data{{ if .Values.nonRoot }}-nr{{ end }}
      spec:
        {{- toYaml $.Values.deployment.storageSpec | nindent 8 }}
